searchState.loadedDescShard("frontmatter_gen", 0, "The <code>error</code> module contains error types related to the …\nExtracts frontmatter from a string of content.\nThe <code>extractor</code> module contains functions for extracting raw …\nThe <code>parser</code> module contains functions for parsing …\nConverts frontmatter to a specific format.\nThe <code>types</code> module contains types related to the frontmatter …\nError occurred during conversion between formats.\nError occurred during frontmatter extraction.\nRepresents errors that can occur during frontmatter …\nThe frontmatter format is invalid or unsupported.\nInvalid JSON frontmatter.\nInvalid TOML frontmatter.\nInvalid YAML frontmatter.\nJSON frontmatter exceeds maximum nesting depth.\nError occurred while parsing JSON.\nNo frontmatter found in the content.\nGeneric parse error.\nError occurred while parsing TOML.\nError for unsupported or unknown frontmatter format.\nError occurred while parsing YAML.\nExample usage of the <code>FrontmatterError</code> enum.\nReturns the argument unchanged.\nCreates a generic parse error with a custom message.\nCalls <code>U::from(self)</code>.\nHelper function to create an <code>UnsupportedFormat</code> error with …\nThe line number where the unsupported format was detected.\nThe source error from the YAML parser.\nDetects the format of the extracted frontmatter.\nExtracts frontmatter enclosed by the given start and end …\nExtracts JSON frontmatter from the content by detecting …\nExtracts raw frontmatter from the content, detecting YAML, …\nParses raw frontmatter string into a <code>Frontmatter</code> object …\nConverts a <code>Frontmatter</code> object to a string representation …\nRepresents an array of values.\nRepresents a boolean value.\nRepresents the different formats supported for frontmatter …\nRepresents the frontmatter, a collection of key-value …\nJSON format.\nRepresents a null value.\nRepresents a numeric value.\nRepresents an object (frontmatter).\nRepresents a string value.\nRepresents a tagged value, containing a tag and a value.\nTOML format.\nUnsupported format.\nA flexible value type that can hold various types of data …\nYAML format.\nReturns the length of the array if the value is an array, …\nReturns the value as an array, if it is of type <code>Array</code>.\nReturns the value as a boolean, if it is of type <code>Boolean</code>.\nReturns the value as a float, if it is of type <code>Number</code>.\nReturns the value as an object (frontmatter), if it is of …\nReturns the value as a string slice, if it is of type …\nReturns the value as a tagged value, if it is of type …\nChecks if the frontmatter contains a given key.\nEscapes special characters in a string (e.g., backslashes …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Frontmatter</code> from an iterator of key-value pairs.\nRetrieves a reference to a value associated with a key.\nRetrieves a mutable reference to a value associated with a …\nAttempts to get a mutable reference to the array if the …\nInserts a key-value pair into the frontmatter.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAttempts to convert the value into a <code>bool</code>.\nAttempts to convert the value into an <code>f64</code>.\nAttempts to convert the value into a <code>String</code>.\nChecks if the value is of type <code>Array</code>.\nChecks if the value is of type <code>Boolean</code>.\nChecks if the frontmatter is empty.\nChecks if the value is of type <code>Null</code>.\nChecks if a given key exists and its value is <code>null</code>.\nChecks if the value is of type <code>Number</code>.\nChecks if the value is of type <code>Object</code>.\nChecks if the value is of type <code>String</code>.\nChecks if the value is of type <code>Tagged</code>.\nReturns an iterator over the key-value pairs of the …\nReturns a mutable iterator over the key-value pairs of the …\nReturns the number of entries in the frontmatter.\nMerges another frontmatter into this one. If a key exists, …\nCreates a new, empty frontmatter.\nRemoves a key-value pair from the frontmatter.\nAttempts to convert the value into a <code>Frontmatter</code>.\nConverts the value to a string representation regardless …")