var searchIndex = new Map(JSON.parse('[["frontmatter_gen",{"t":"EEECHCCHCPPGPPPPPPPPPPPNNNNNHNNNNNNNNNNNNNNOOHHHHHHPPGFPPPPPPPPGPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["Format","Frontmatter","Value","error","extract","extractor","parser","to_format","types","ConversionError","ExtractionError","FrontmatterError","InvalidFormat","InvalidJson","InvalidToml","InvalidYaml","JsonDepthLimitExceeded","JsonParseError","NoFrontmatterFound","ParseError","TomlParseError","UnsupportedFormat","YamlParseError","borrow","borrow_mut","clone","clone_into","clone_to_uninit","example_usage","fmt","","from","","","generic_parse_error","into","source","to_owned","to_string","try_from","try_into","type_id","unsupported_format","line","source","detect_format","extract_delimited_frontmatter","extract_json_frontmatter","extract_raw_frontmatter","parse","to_string","Array","Boolean","Format","Frontmatter","Json","Null","Number","Object","String","Tagged","Toml","Unsupported","Value","Yaml","array_len","as_array","as_bool","as_f64","as_object","as_str","as_tagged","borrow","","","borrow_mut","","","clone","","","clone_into","","","clone_to_uninit","","","contains_key","default","","","deserialize","","eq","","","equivalent","","","escape_str","fmt","","","","","from","","","","","","","from_iter","","from_str","get","get_mut","get_mut_array","insert","into","","","into_bool","into_f64","into_iter","into_string","is_array","is_boolean","is_empty","is_null","","is_number","is_object","is_string","is_tagged","iter","iter_mut","len","merge","new","remove","serialize","","to_object","to_owned","","","to_string","","to_string_representation","try_from","","","try_into","","","type_id","",""],"q":[[0,"frontmatter_gen"],[9,"frontmatter_gen::error"],[43,"frontmatter_gen::error::FrontmatterError"],[45,"frontmatter_gen::extractor"],[49,"frontmatter_gen::parser"],[51,"frontmatter_gen::types"],[159,"core::result"],[160,"alloc::string"],[161,"core::fmt"],[162,"serde_json::error"],[163,"toml::de"],[164,"core::error"],[165,"core::option"],[166,"core::any"],[167,"alloc::vec"],[168,"serde::de"],[169,"core::iter::traits::collect"],[170,"std::collections::hash::map"],[171,"serde::ser"]],"i":"`````````j0`0000000000000000`00000000000000CjCl``````Bf0``n1111100`0111111101f120120120120012020120111`12200122222020200201202202220202222000000202120202120120120","f":"````{{{d{b}}}{{l{{h{f{d{b}}}}j}}}}``{{{d{f}}n}{{l{A`j}}}}```````````````{d{{d{c}}}{}}{{{d{Ab}}}{{d{Abc}}}{}}{{{d{j}}}j}{{d{d{Abc}}}Ad{}}{dAd}{{}{{l{Adj}}}}{{{d{j}}{d{AbAf}}}Ah}0{cc{}}{Ajj}{Alj}{{{d{b}}}j}{{}c{}}{{{d{j}}}{{B`{{d{An}}}}}}{dc{}}{dA`}{c{{l{e}}}{}{}}{{}{{l{c}}}{}}{dBb}{Bdj}``{{{d{b}}}{{l{nj}}}}{{{d{b}}{d{b}}{d{b}}}{{B`{{d{b}}}}}}{{{d{b}}}{{l{{d{b}}j}}}}{{{d{b}}}{{l{{h{{d{b}}{d{b}}}}j}}}}{{{d{b}}n}{{l{fj}}}}{{{d{f}}n}{{l{A`j}}}}``````````````{{{d{Bf}}}{{B`{Bd}}}}{{{d{Bf}}}{{B`{{d{{Bh{Bf}}}}}}}}{{{d{Bf}}}{{B`{Bj}}}}{{{d{Bf}}}{{B`{Bl}}}}{{{d{Bf}}}{{B`{{d{f}}}}}}{{{d{Bf}}}{{B`{{d{b}}}}}}{{{d{Bf}}}{{B`{{h{{d{b}}{d{Bf}}}}}}}}{d{{d{c}}}{}}00{{{d{Ab}}}{{d{Abc}}}{}}00{{{d{n}}}n}{{{d{Bf}}}Bf}{{{d{f}}}f}{{d{d{Abc}}}Ad{}}00{dAd}00{{{d{f}}{d{b}}}Bj}{{}n}{{}Bf}{{}f}{c{{l{Bf}}}Bn}{c{{l{f}}}Bn}{{{d{n}}{d{n}}}Bj}{{{d{Bf}}{d{Bf}}}Bj}{{{d{f}}{d{f}}}Bj}{{d{d{c}}}Bj{}}00{{{d{b}}}A`}{{{d{n}}{d{AbAf}}}Ah}{{{d{Bf}}{d{AbAf}}}Ah}0{{{d{f}}{d{AbAf}}}Ah}0{cc{}}{BjBf}{{{d{b}}}Bf}{A`Bf}3{BlBf}4{cBf{{Cb{}{{C`{Bf}}}}}}{cf{{Cb{}{{C`{{h{A`Bf}}}}}}}}{{{d{b}}}{{l{Bfc}}}{}}{{{d{f}}{d{b}}}{{B`{{d{Bf}}}}}}{{{d{Abf}}{d{b}}}{{B`{{d{AbBf}}}}}}{{{d{AbBf}}}{{B`{{d{Ab{Bh{Bf}}}}}}}}{{{d{Abf}}A`Bf}{{B`{Bf}}}}{{}c{}}00{Bf{{l{BjA`}}}}{Bf{{l{BlA`}}}}{fc{}}{Bf{{l{A`A`}}}}{{{d{Bf}}}Bj}0{{{d{f}}}Bj}1{{{d{f}}{d{b}}}Bj}2222{{{d{f}}}{{Cd{A`Bf}}}}{{{d{Abf}}}{{Cf{A`Bf}}}}{{{d{f}}}Bd}{{{d{Abf}}f}Ad}{{}f}{{{d{Abf}}{d{b}}}{{B`{Bf}}}}{{{d{Bf}}c}lCh}{{{d{f}}c}lCh}{Bf{{l{fA`}}}}{dc{}}00{dA`}0{{{d{Bf}}}A`}{c{{l{e}}}{}{}}00{{}{{l{c}}}{}}00{dBb}00","D":"Jn","p":[[1,"str"],[1,"reference",null,null,1],[5,"Frontmatter",51],[1,"tuple",null,null,1],[6,"FrontmatterError",9],[6,"Result",159,null,1],[6,"Format",51],[5,"String",160],[0,"mut"],[1,"unit"],[5,"Formatter",161],[8,"Result",161],[5,"Error",162],[5,"Error",163],[10,"Error",164],[6,"Option",165,null,1],[5,"TypeId",166],[1,"usize"],[6,"Value",51],[5,"Vec",167],[1,"bool"],[1,"f64"],[10,"Deserializer",168],[17,"Item"],[10,"IntoIterator",169],[5,"Iter",170],[5,"IterMut",170],[10,"Serializer",171],[15,"UnsupportedFormat",43],[15,"YamlParseError",43]],"r":[[0,51],[1,51],[2,51]],"b":[[29,"impl-Debug-for-FrontmatterError"],[30,"impl-Display-for-FrontmatterError"],[32,"impl-From%3CError%3E-for-FrontmatterError"],[33,"impl-From%3CError%3E-for-FrontmatterError"],[101,"impl-Debug-for-Value"],[102,"impl-Display-for-Value"],[103,"impl-Debug-for-Frontmatter"],[104,"impl-Display-for-Frontmatter"],[106,"impl-From%3Cbool%3E-for-Value"],[107,"impl-From%3C%26str%3E-for-Value"],[108,"impl-From%3CString%3E-for-Value"],[110,"impl-From%3Cf64%3E-for-Value"]],"c":"OjAAAAAAAAA=","e":"OzAAAAEAAEgAEAAAAAMAGAAEAB4AAQAhAAEAJQAFAEkADgBZAAoAZQAEAGsAAgBvAAAAcQAAAHMAAAB9AAAAjgABAJEABACXAAgA","P":[[23,"T"],[25,""],[26,"T"],[27,""],[31,"T"],[32,""],[35,"U"],[36,""],[37,"T"],[38,""],[39,"U,T"],[40,"U"],[41,""],[72,"T"],[78,""],[81,"T"],[84,""],[91,"__D"],[93,""],[96,"K"],[99,""],[105,"T"],[106,""],[109,"T"],[110,""],[111,"T"],[112,"I"],[114,"FromStr::Err"],[115,""],[119,"U"],[122,""],[124,"IntoIterator::IntoIter"],[125,""],[141,"__S"],[143,""],[144,"T"],[147,""],[150,"U,T"],[153,"U"],[156,""]]}]]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
//{"start":39,"fragment_lengths":[5484]}